@model Admin.Models.BaseUserStatu
@using Admin.BaseClass.UI
@using Admin.Models;
@{
    Widget widget = new Widget("UserStatus_list", "UserStatuss", Admin.BaseClass.UI.BaseUIIcon.fa.fa_fa_reorder, this.ViewContext);
    widget.Data_widget_deletebutton = true;
    widget.Data_widget_togglebutton = true;
    widget.Data_widget_colorbutton = true;
    widget.Data_widget_fullscreenbutton = true;
    widget.Data_widget_sortable = true;
    widget.Data_widget_editbutton = true;
}
<div class="modal fade csTableFilters" data-onclose="csUserStatus.data('CStable').update();" id="UserStatusFilters" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title">
                    Filters
                </h4>
            </div>
            <div class="modal-body no-padding">
                <form action="#" class="smart-form">
                    <fieldset>
                        @Html.HiddenFor(d => d.id)
                        <div class="row">
                            @Html.BaseTextBox("name", Model.name, "Name", new { icon1 = new BaseTextBoxIcon() { Icon = Admin.BaseClass.UI.BaseUIIcon.fa.fa_fa_text_width, Position = BaseTextBoxIconPosition.icon_append } }, 6, new { placeholder = ("Name") }, "required;maxlength:50", "", false, new MyHtmlHelpers.BaseToolTip("Form Field"))
                            @Html.BaseTextBox("description", Model.description, "Description", new { icon1 = new BaseTextBoxIcon() { Icon = Admin.BaseClass.UI.BaseUIIcon.fa.fa_fa_text_width, Position = BaseTextBoxIconPosition.icon_append } }, 6, new { placeholder = ("Description") }, "maxlength:100", "", true, new MyHtmlHelpers.BaseToolTip("Form Field"))
                        </div>
                        <div class="row">
                            @Html.BaseCheckBox("canLogin", Model.canLogin, "", "CanLogin", 6, "Si", "No", "")
                            @{var selecteddefaultAction = new List<object>(); if (Model.defaultAction != null) { selecteddefaultAction.Add(Model.defaultAction); } }
                            @Html.BaseDropDownList("defaultAction", "BaseAction", "id", "name", "", 6, "DefaultAction", "Select BaseAction", "", Admin.BaseClass.UI.BaseUIIcon.fa.fa_fa_arrow_circle_down, selecteddefaultAction, false, "Refresh BaseAction", "", "", "", null)
                        </div>
                    </fieldset>
                    <footer>
                        <button class="btn btn-info formClose" data-begin="$('#UserStatusFilters').modal('hide');" title="@("Ok")"><i class="@BaseUIIconText.glyphicon.glyphicon_glyphicon_ok"></i></button>
                    </footer>
                </form>
            </div>
        </div>
    </div>
</div>
<section id="widget-grid" class="">
    @{bool allowExport = false; bool saveConfig = false; string cookieName = ""; int id = 0; bool enableControl = true;}
    @foreach (var item in (List<BaseDynamicList>)ViewBag.dynamicList)
    {
        if (item.name == ViewBag.tableName)
        {
            allowExport = item.allowExport;
            cookieName = item.cookieKey;
            id = item.id;
            saveConfig = item.allowSaveConfig;
            enableControl = item.enableControl;
            break;
        }
    }
    <div class="row">
        @Html.Raw(widget.beginHeader())
        @Html.Raw(widget.beginCustomButton())
        <button class="btn btn-success baseDynamicModal" data-loading-text="<i class='fa fa-refresh fa-spin'></i>" data-action="@Url.Action("Form", "BaseUserStatus")" title="@("Add New")"><i class="@BaseUIIconText.glyphicon.glyphicon_glyphicon_plus"></i>Agregar</button>
        <button class="btn btn-@(ViewBag.config.secundaryColor) refreshTable" onclick="refreshMe();" data-action="@Url.Action("Form", "BaseUserStatus")" title="@("Refresh Table")"><i class="@BaseUIIconText.glyphicon.glyphicon_glyphicon_refresh"></i></button>
        <button class="btn btn-@(ViewBag.config.secundaryColor) refreshTable" data-toggle="modal" data-target="#UserStatusFilters" title="@("Filters")"><i class="@BaseUIIconText.glyphicon.glyphicon_glyphicon_filter"></i></button>
        @if (allowExport)
        {
            <button class="btn btn-info" onclick="exportCSV();" title="@("Export Excel")"><i class="@BaseUIIconText.glyphicon.glyphicon_glyphicon_export"></i></button>
        }
        @Html.Raw(widget.Dcontinue())
        @Html.Raw(widget.endHeader())
        <div id="csUserStatusDiv" data-url="@Url.Action("data", "BaseUserStatus")" class=""></div>
        @Html.Raw(widget.Dcontinue())
        @Html.Raw(widget.end())
    </div>
</section>
<script type="text/javascript">
    pageSetUp();
    var questionSaveConfig = "@saveConfig";

    if (questionSaveConfig == "False") {
        var ck = "@cookieName";
        delete_cookie(ck);
    }

    function refreshMe() {
        csUserStatus.data('CStable').update();
    }

    var clOff = [
    @foreach (var item in (List<BaseDynamicColumnList>) ViewBag.column)
     {
         if(item.listID == id && !item.show)
         {
             string quote = "\"";
             string x = quote + item.name + quote + ", ";
             @Html.Raw(x)
         }
     }
    ];
    csUserStatus = $('#csUserStatusDiv');
    csUserStatus.CStable({
        ajaxUrl: csUserStatus.data('url'),
        pagerFirstLabel: '@("First")',
        pagerLastLabel: '@("Last")',
        ajaxData: {
            limit: 10,
            offset: 0
        },
        columnasDesactivadas: clOff,
        defaultColumnOff: true,
        current: 1,
        pagerCount: 10,
        filterListSelector: {
            '#id': {
                isControl: false
            },
            '#name': {
                isControl: false
            },
            '#description': {
                isControl: false
            },
            '#canLogin': {
                isControl: false
            },
            '#defaultAction': {
                isControl: false
            },
        }
    });
    function exportCSV() {
        var cadenaGet = Filters(); //Almacena todos los Filters

        $.ajax({
            url: "@Url.Action("getCSV", "BaseUserStatus")",
            data: cadenaGet + "colActivas=" + columnasActivasReporte() + "&tableName=@ViewBag.tableName",
            success: function (data) {
                window.location.href = this.url;
            }
        });
    }

    //Funcion que retorna un string con los Filters aplicados, en formato GET
    function Filters() {
        var get = "";
        var array = $.map(csUserStatus.data('CStable').options.ajaxData, function (value, index) {
            return index;
        });
        var array2 = $.map(csUserStatus.data('CStable').options.ajaxData, function (value, index) {
            return value;
        });
        for (var i = 0; i < array.length; i++) {
            get += array[i] + "=" + array2[i] + "&";
        }
        return get;
    }


    //Funcion que retorna un String con las columnas activas, separadas por "-"
    function columnasActivasReporte() {
        var ac = eval(unescape(leerCockie("@cookieName")));
        var colActivas = "";
        if (ac != undefined) {
            for (var i = 0; i < ac.length; i++) {
                if (ac[i].c) {
                    colActivas += columns_cstable_cookie_header_csUserStatusDiv[ac[i].v].n + "-";
                }
            }
            colActivas = colActivas.substring(0, colActivas.length - 2);
        }
        else {
            for (var i = 0; i < columns_cstable_cookie_header_csUserStatusDiv.length; i++) {
                colActivas += columns_cstable_cookie_header_csUserStatusDiv[i].n + "-";
            }
            colActivas = colActivas.substring(0, colActivas.length - 2);
        }
        return colActivas;
    }

    //Si no existe la cookie
function makeHide@(ViewBag.tableName)() { if (!existCookie("@cookieName")) { $("#updatechecks").trigger("click"); } } if (!existCookie("@cookieName")) {
        $("#updatechecks").trigger("click");
    }

    //Funcion que retorna el contenido de la cookie con el nombre que le pasan
    function leerCockie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
        }
        return "";
    }

    //Delete cookie
    function delete_cookie(name) {
        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }

    function existCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0) return true;
        }
        return false;
    }

    function reset() {
        var ck = "@cookieName";
        delete_cookie(ck);
        location.reload();
    }
</script>
